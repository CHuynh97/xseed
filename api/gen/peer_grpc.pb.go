// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: peer.proto

package xseed

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PeerService_Join_FullMethodName      = "/xseed.PeerService/Join"
	PeerService_Drop_FullMethodName      = "/xseed.PeerService/Drop"
	PeerService_Broadcast_FullMethodName = "/xseed.PeerService/Broadcast"
)

// PeerServiceClient is the client API for PeerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PeerServiceClient interface {
	Join(ctx context.Context, in *PeerJoinRequest, opts ...grpc.CallOption) (*PeerJoinResponse, error)
	Drop(ctx context.Context, in *PeerDropRequest, opts ...grpc.CallOption) (*PeerDropResponse, error)
	Broadcast(ctx context.Context, in *PeerEvent, opts ...grpc.CallOption) (*BroadcastResponse, error)
}

type peerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPeerServiceClient(cc grpc.ClientConnInterface) PeerServiceClient {
	return &peerServiceClient{cc}
}

func (c *peerServiceClient) Join(ctx context.Context, in *PeerJoinRequest, opts ...grpc.CallOption) (*PeerJoinResponse, error) {
	out := new(PeerJoinResponse)
	err := c.cc.Invoke(ctx, PeerService_Join_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *peerServiceClient) Drop(ctx context.Context, in *PeerDropRequest, opts ...grpc.CallOption) (*PeerDropResponse, error) {
	out := new(PeerDropResponse)
	err := c.cc.Invoke(ctx, PeerService_Drop_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *peerServiceClient) Broadcast(ctx context.Context, in *PeerEvent, opts ...grpc.CallOption) (*BroadcastResponse, error) {
	out := new(BroadcastResponse)
	err := c.cc.Invoke(ctx, PeerService_Broadcast_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PeerServiceServer is the server API for PeerService service.
// All implementations should embed UnimplementedPeerServiceServer
// for forward compatibility
type PeerServiceServer interface {
	Join(context.Context, *PeerJoinRequest) (*PeerJoinResponse, error)
	Drop(context.Context, *PeerDropRequest) (*PeerDropResponse, error)
	Broadcast(context.Context, *PeerEvent) (*BroadcastResponse, error)
}

// UnimplementedPeerServiceServer should be embedded to have forward compatible implementations.
type UnimplementedPeerServiceServer struct {
}

func (UnimplementedPeerServiceServer) Join(context.Context, *PeerJoinRequest) (*PeerJoinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Join not implemented")
}
func (UnimplementedPeerServiceServer) Drop(context.Context, *PeerDropRequest) (*PeerDropResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Drop not implemented")
}
func (UnimplementedPeerServiceServer) Broadcast(context.Context, *PeerEvent) (*BroadcastResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Broadcast not implemented")
}

// UnsafePeerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PeerServiceServer will
// result in compilation errors.
type UnsafePeerServiceServer interface {
	mustEmbedUnimplementedPeerServiceServer()
}

func RegisterPeerServiceServer(s grpc.ServiceRegistrar, srv PeerServiceServer) {
	s.RegisterService(&PeerService_ServiceDesc, srv)
}

func _PeerService_Join_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PeerJoinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PeerServiceServer).Join(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PeerService_Join_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PeerServiceServer).Join(ctx, req.(*PeerJoinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PeerService_Drop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PeerDropRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PeerServiceServer).Drop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PeerService_Drop_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PeerServiceServer).Drop(ctx, req.(*PeerDropRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PeerService_Broadcast_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PeerEvent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PeerServiceServer).Broadcast(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PeerService_Broadcast_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PeerServiceServer).Broadcast(ctx, req.(*PeerEvent))
	}
	return interceptor(ctx, in, info, handler)
}

// PeerService_ServiceDesc is the grpc.ServiceDesc for PeerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PeerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "xseed.PeerService",
	HandlerType: (*PeerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Join",
			Handler:    _PeerService_Join_Handler,
		},
		{
			MethodName: "Drop",
			Handler:    _PeerService_Drop_Handler,
		},
		{
			MethodName: "Broadcast",
			Handler:    _PeerService_Broadcast_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "peer.proto",
}

const (
	PeerChannel_Connect_FullMethodName = "/xseed.PeerChannel/Connect"
)

// PeerChannelClient is the client API for PeerChannel service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PeerChannelClient interface {
	Connect(ctx context.Context, opts ...grpc.CallOption) (PeerChannel_ConnectClient, error)
}

type peerChannelClient struct {
	cc grpc.ClientConnInterface
}

func NewPeerChannelClient(cc grpc.ClientConnInterface) PeerChannelClient {
	return &peerChannelClient{cc}
}

func (c *peerChannelClient) Connect(ctx context.Context, opts ...grpc.CallOption) (PeerChannel_ConnectClient, error) {
	stream, err := c.cc.NewStream(ctx, &PeerChannel_ServiceDesc.Streams[0], PeerChannel_Connect_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &peerChannelConnectClient{stream}
	return x, nil
}

type PeerChannel_ConnectClient interface {
	Send(*ChannelRequest) error
	Recv() (*ChannelResponse, error)
	grpc.ClientStream
}

type peerChannelConnectClient struct {
	grpc.ClientStream
}

func (x *peerChannelConnectClient) Send(m *ChannelRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *peerChannelConnectClient) Recv() (*ChannelResponse, error) {
	m := new(ChannelResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PeerChannelServer is the server API for PeerChannel service.
// All implementations should embed UnimplementedPeerChannelServer
// for forward compatibility
type PeerChannelServer interface {
	Connect(PeerChannel_ConnectServer) error
}

// UnimplementedPeerChannelServer should be embedded to have forward compatible implementations.
type UnimplementedPeerChannelServer struct {
}

func (UnimplementedPeerChannelServer) Connect(PeerChannel_ConnectServer) error {
	return status.Errorf(codes.Unimplemented, "method Connect not implemented")
}

// UnsafePeerChannelServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PeerChannelServer will
// result in compilation errors.
type UnsafePeerChannelServer interface {
	mustEmbedUnimplementedPeerChannelServer()
}

func RegisterPeerChannelServer(s grpc.ServiceRegistrar, srv PeerChannelServer) {
	s.RegisterService(&PeerChannel_ServiceDesc, srv)
}

func _PeerChannel_Connect_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PeerChannelServer).Connect(&peerChannelConnectServer{stream})
}

type PeerChannel_ConnectServer interface {
	Send(*ChannelResponse) error
	Recv() (*ChannelRequest, error)
	grpc.ServerStream
}

type peerChannelConnectServer struct {
	grpc.ServerStream
}

func (x *peerChannelConnectServer) Send(m *ChannelResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *peerChannelConnectServer) Recv() (*ChannelRequest, error) {
	m := new(ChannelRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PeerChannel_ServiceDesc is the grpc.ServiceDesc for PeerChannel service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PeerChannel_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "xseed.PeerChannel",
	HandlerType: (*PeerChannelServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Connect",
			Handler:       _PeerChannel_Connect_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "peer.proto",
}
